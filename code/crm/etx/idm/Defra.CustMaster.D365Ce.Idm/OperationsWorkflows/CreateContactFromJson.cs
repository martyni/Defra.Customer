
//// <copyright file="CreateContactFromJson.cs" company="">
//// Copyright (c) 2018 All Rights Reserved
//// </copyright>
//// <author></author>
//// <date>6/8/2018 9:09:44 PM</date>
//// <summary>Implements the CreateContactFromJson Plugin.</summary>
//// <auto-generated>
////     This code was generated by a tool.
////     Runtime Version:4.0.30319.1
//// </auto-generated>
//using System;
//using System.ServiceModel;
//using System.Activities;
//using Microsoft.Xrm.Sdk;
//using Microsoft.Xrm.Sdk.Workflow;
//using SimpleJSON;
//using Defra.CustMaster.D365Ce.Idm.OperationsWorkflows.Model;

//namespace Defra.CustMaster.D365Ce.Idm.OperationsWorkflows
//{


//    /// </summary>    
//    public class CreateContactFromJson: WorkFlowActivityBase
//    {


//        #region Properties 
//        //Properties for this activity
//        [RequiredArgument]
//        [Input("payload")]
//        public InArgument<String> Payload { get; set; }

//        [RequiredArgument]
//        [Output("responsepayload")]
//        public OutArgument<string> ResponsePayload { get; set; }
//        #endregion


//        /// <summary>
//        /// Executes the WorkFlow.
//        /// </summary>
//        /// <param name="crmWorkflowContext">The <see cref="LocalWorkflowContext"/> which contains the
//        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
//        /// </param>       
//        /// <remarks>
//        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
//        /// The WorkFlow's Execute method should be written to be stateless as the constructor
//        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
//        /// could execute the WorkFlow at the same time. All per invocation state information
//        /// is stored in the context. This means that you should not use global variables in WorkFlows.
//        /// </remarks>
//        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
//        {   
//            if (crmWorkflowContext == null)
//            {
//                throw new ArgumentNullException("crmWorkflowContext");
//            }

//	        try
//	        {
//                string payloadJson = Payload.Get<string>(executionContext);
//                var contactJson = JSON.Parse(payloadJson);

//                //ResponsePayload.Set(executionContext, payloadContact.email);
//                string firstname = contactJson["firstname"].Value;
//                ResponsePayload.Set(executionContext, firstname);

//                //var N = JSON.Parse(payloadJson);
//            }
//	        catch (FaultException<OrganizationServiceFault> e)
//            {                
//                // Handle the exception.
//                throw e;
//            }	  

//        }
         

//    }

//}
